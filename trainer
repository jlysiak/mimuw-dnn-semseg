#!/usr/bin/env python3.5
"""
Deep Neural Networks @ MIMUW 2017/18
Jacek ≈Åysiak

Semantic segmentation using convolutional network

"""
import argparse

from semseg import Trainer, defaults, create_default_config, load_config

desc = """
    Deep convolutional network for semantic segmentation
    Deep Neural Networks @ MIMUW 2017
"""

def add_args_modify_conf(args):
    """Default configuration modification options"""

    args.add_argument("-d", "--dataset", help="Dataset location", metavar="DIR")
    args.add_argument("-c", "--checkpoint", help="Checkpoint directory")
    args.add_argument("-l", "--logs", help="Log file path")
    args.add_argument("-L", "--lock", help="Lock checkpoint file", action="store_true")
    args.add_argument("-o", "--output", help="Output directory")
    args.add_argument("-b", "--tblogs", help="Directory for TensorBoard logs")
    args.add_argument("-r", "--lrate", help="Learning rate", type=float)
    args.add_argument("-f", "--frac", help="Fraction of dataset taken.", type=float)
    args.add_argument("--gpu", help="Use GPU", action="store_true")


def add_args_create_load_conf(args):
    # ==== CREATE/LOAD CONFIGURATION
    args.add_argument("-C", "--config", help="Path to configuration file")
    args.add_argument("--new_config", help="Create new default configuration file", 
            nargs="?", const=defaults.DEFAULT_CONF_PATH)


def add_args_actions(args):
    # ==== ACTIONS 
    args.add_argument("--train_pipe_test", metavar="OUT", nargs="?", 
            const="train_pipe_test", help="Test input pipe and generate \
                    imgs into `OUT` dir.")
    args.add_argument("--pred_pipe_test", metavar="OUT", nargs="?", 
            const="pred_pipe_test", help="Test input pipe and generate \
                    imgs into `OUT` dir.")
    args.add_argument("--test_valid_pipe", metavar="OUT", nargs="?", 
            const="test_valid_pipe", help="Test validation input pipe and \
                    generate imgs into `OUT` dir.")
    
    args.add_argument("--predict", help="Generate predictions for given data", 
            metavar="PATH", nargs="*")
    args.add_argument("--validate", help="Validate model on given data", action="store_true")
    args.add_argument("--train", help="TRAINING TIME!", action="store_true")


def load_and_update(FLAGS, conf_path):
    # Load configuration
    if FLAGS.config is not None:
        conf_path = FLAGS.config

    config = load_config(conf_path)
    
    # Update configuration using passed flags
    if FLAGS.dataset is not None:
        config["DATASET_DIR"] = FLAGS.dataset
    if FLAGS.checkpoint is not None:
        config["CKPT_DIR"] = FLAGS.checkpoint
    if FLAGS.logs is not None:
        config["LOG_PATH"] = FLAGS.logs
    if FLAGS.tblogs is not None:
        config["TB_DIR"] = FLAGS.tblogs
    if FLAGS.lrate is not None:
        config["LEARNING_RATE"] = FLAGS.lrate
    if FLAGS.frac is not None:
        config["DS_FRAC"] = FLAGS.frac
    if FLAGS.gpu:
        config["DEVICE"] = "GPU"
    config["LOCK"] = FLAGS.lock 
    return config


if __name__ == '__main__':
    args = argparse.ArgumentParser(description=desc)
    add_args_modify_conf(args)
    add_args_create_load_conf(args)
    add_args_actions(args)
    FLAGS, unknown = args.parse_known_args()

    if FLAGS.new_config is not None:
        create_default_config(FLAGS.new_config)
        print("Network config created: " + FLAGS.new_config)
        exit(0)
    
    config = load_and_update(FLAGS, defaults.DEFAULT_CONF_PATH)

    # Run Trainer
    if FLAGS.train:
        with Trainer(config) as T:
            T.train()
        
    elif FLAGS.predict is not None:
        with Trainer(config) as T:
            T.predict(FLAGS.predict, FLAGS.output)

    elif FLAGS.train_pipe_test is not None:
        with Trainer(config) as T:
            pass 
    elif FLAGS.test_valid_pipe is not None:
        with Trainer(config) as T:
            T.test_valid_pipe(FLAGS.test_valid_pipe) 
    elif FLAGS.pred_pipe_test is not None:
        with Trainer(config) as T:
            pass
    else:
        args.print_help()


